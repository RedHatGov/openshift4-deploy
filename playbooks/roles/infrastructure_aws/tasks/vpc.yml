---

- name: Get list of Availability Zones
  aws_az_info:
  register: r_az_info

- name: Capture Availability Zone list
  set_fact:
    az_list: "{{ az_list|default([]) + [ item.zone_name ] }}"
  loop: "{{ r_az_info.availability_zones }}"
  when: item.state in "available"

- name: Create a new DHCP Option Set
  ec2_vpc_dhcp_option:
    dns_servers:
      - AmazonProvidedDNS
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
      Name: "{{ cluster_id }}"
  register: r_dhcp

- name: Create a new VPC
  ec2_vpc_net:
    name: "{{ cluster_id }}"
    cidr_block: "{{ vpc_cidr }}"
    dhcp_opts_id: "{{ r_dhcp.dhcp_options_id }}"
    dns_support: yes
    dns_hostnames: yes
    tenancy: default
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
      Name: "{{ cluster_id }}"
  register: r_vpc

- name: Capture VPC ID
  set_fact: 
    vpc_id: "{{ r_vpc.vpc.id }}"

- name: Find Route Table ID
  ec2_vpc_route_table_info:
    filters:
      vpc-id: "{{ vpc_id }}"
  register: r_route_tables

- name: Capture Route Table ID
  set_fact:
    route_table_id: "{{ r_route_tables.route_tables.0.id }}"

- name: Create a new Internet Gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
      Name: "{{ cluster_id }}"
  register: r_igw

- name: Create public Subnets (with /24 mask bits)
  ec2_vpc_subnet:
    map_public: true
    az: "{{ item }}"
    cidr: "{{ vpc_cidr | ipsubnet(24,idx) }}"
    vpc_id: "{{ vpc_id }}"
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
      Name: "{{ cluster_id }}-public-{{ item }}"
  loop_control:
    index_var: idx
  loop: "{{ az_list }}"
  register: r_public_subnets

- name: Capture public Subnet IDs
  set_fact:
    public_subnets: "{{ public_subnets|default([]) + [ item.subnet.id ] }}"
  loop: "{{ r_public_subnets.results }}"

- name: Update Route Table
  ec2_vpc_route_table:
    lookup: id
    vpc_id: "{{ vpc_id }}"
    route_table_id: "{{ route_table_id }}"
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
      Name: "{{ cluster_id }}-public"
    subnets: "{{ public_subnets }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ r_igw.gateway_id }}"

- name: Create NAT Gateways for the private subnets
  ec2_vpc_nat_gateway:
    if_exist_do_not_create: true
    subnet_id: "{{ item }}"
    # tags:   # THIS MODULE CAN'T DO TAGS
    #     OpenShiftClusterId: "{{ cluster_id }}"
    #     Name: "{{ cluster_id }}-public-{{ item }}"
  loop: "{{ public_subnets }}"
  register: r_nat_gateway

- name: Add NAT Gateway tags
  command: >-
    aws ec2 create-tags
      --resources {{ item.0.nat_gateway_id }}
      --tags Key=Name,Value={{ cluster_id }}-{{ item.1 }}
             Key=OpenShiftClusterId,Value={{ cluster_id }}
  with_together:
    - "{{ r_nat_gateway.results }}"
    - "{{ az_list }}"

- name: Create private Subnets (with /24 mask bits)
  ec2_vpc_subnet:
    map_public: false
    az: "{{ item }}"
    cidr: "{{ vpc_cidr | ipsubnet(24,idx+100) }}"
    vpc_id: "{{ vpc_id }}"
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
      Name: "{{ cluster_id }}-private-{{ item }}"
  loop_control:
    index_var: idx
  loop: "{{ az_list }}"
  register: r_private_subnets

- name: Capture private Subnet IDs
  set_fact:
    private_subnets: "{{ private_subnets|default([]) + [ item.subnet.id ] }}"
  loop: "{{ r_private_subnets.results }}"

- name: Create private Route Tables
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
      Name: "{{ cluster_id }}-private-{{ item.2 }}"
    subnets: "{{ item.0 }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ item.1.nat_gateway_id }}"
  with_together:
    - "{{ private_subnets }}"
    - "{{ r_nat_gateway.results }}"
    - "{{ az_list }}"