---
# Assume that AWS restrictions will prevent us from creating the load-balancers
# But we should be allowed to configure a pre-created load-balancer if we know the 

# Several load balancer modules don't work with gov-cloud regions:
# ec2_elb_lb, ec2_elb_info, elb_classic_lb, elb_instance
# https://github.com/ansible/community/blob/master/group-aws/boto3.md

- name: Create the required Network Load Balancer (API access)
  command: >-
    aws elbv2 create-load-balancer
      --name "{{ cluster_id }}-api"
      --type network
      --scheme internal
      --subnets {{ private_subnets | join(' ') }}
      --tags Key=OpenShiftClusterId,Value={{ cluster_id }}
      --output=json
  when: api_nlb_name is not defined
  register: r_create_api_lb

- name: Change AWS CLI output to YAML
  set_fact:
    r_create_api_lb_yaml: "{{ r_create_api_lb.stdout | from_json }}"
  when: r_create_api_lb.changed

- name: Define api_nlb_name variable
  set_fact:
    api_nlb_name: "{{ r_create_api_lb_yaml.LoadBalancers.0.LoadBalancerName}}"
  when: r_create_api_lb.changed


- name: Create the required Network Load Balancer (app router)
  command: >-
    aws elbv2 create-load-balancer
      --name "{{ cluster_id }}-app"
      --type network
      --scheme internal
      --subnets {{ private_subnets | join(' ') }}
      --tags Key=OpenShiftClusterId,Value={{ cluster_id }}
      --output=json
  when: app_nlb_name is not defined
  register: r_create_app_lb

- name: Change AWS CLI output to YAML
  set_fact:
    r_create_app_lb_yaml: "{{ r_create_app_lb.stdout | from_json }}"
  when: r_create_app_lb.changed

- name: Define app_nlb_name variable
  set_fact:
    app_nlb_name: "{{ r_create_app_lb_yaml.LoadBalancers.0.LoadBalancerName}}"
  when: r_create_app_lb.changed



# Can't use loop: because https://github.com/ansible/ansible/issues/32098
- name: "Create the API target group"
  elb_target_group:
    name: "{{ cluster_id[:28] }}-api"  # limit name to 32 chars
    protocol: tcp
    stickiness_enabled: false
    stickiness_type: source_ip
    port: 6443
    vpc_id: "{{ vpc_id }}"
    target_type: instance
    targets:
      - Id: "{{ bootstrap_instance_id.0 }}"
        Port: 6443
      - Id: "{{ master_instance_ids.0 }}"
        Port: 6443
      - Id: "{{ master_instance_ids.1 }}"
        Port: 6443
      - Id: "{{ master_instance_ids.2 }}"
        Port: 6443
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
    state: present
  register: r_tg_api

- name: "Create the Machine Config target group"
  elb_target_group:
    name: "{{ cluster_id[:26] }}-macfg"  # limit name to 32 chars
    protocol: tcp
    stickiness_enabled: false
    stickiness_type: source_ip
    port: 22623
    vpc_id: "{{ vpc_id }}"
    target_type: instance
    targets:
      - Id: "{{ bootstrap_instance_id.0 }}"
        Port: 22623
      - Id: "{{ master_instance_ids.0 }}"
        Port: 22623
      - Id: "{{ master_instance_ids.1 }}"
        Port: 22623
      - Id: "{{ master_instance_ids.2 }}"
        Port: 22623
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
    state: present
  register: r_tg_macfg

- name: "Create the HTTP target group"
  elb_target_group:
    name: "{{ cluster_id[:27] }}-http"  # limit name to 32 chars
    protocol: tcp
    stickiness_enabled: false
    stickiness_type: source_ip
    port: 80
    vpc_id: "{{ vpc_id }}"
    target_type: instance
    targets:
      - Id: "{{ worker_instance_ids.0 }}"
        Port: 80
      - Id: "{{ worker_instance_ids.1 }}"
        Port: 80
      - Id: "{{ worker_instance_ids.2 }}"
        Port: 80
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
    state: present
  register: r_tg_http

- name: "Create the HTTPS target group"
  elb_target_group:
    name: "{{ cluster_id[:26] }}-https"  # limit name to 32 chars
    protocol: tcp
    stickiness_enabled: false
    stickiness_type: source_ip
    port: 443
    vpc_id: "{{ vpc_id }}"
    target_type: instance
    targets:
      - Id: "{{ worker_instance_ids.0 }}"
        Port: 443
      - Id: "{{ worker_instance_ids.1 }}"
        Port: 443
      - Id: "{{ worker_instance_ids.2 }}"
        Port: 443
    tags:
      OpenShiftClusterId: "{{ cluster_id }}"
    state: present
  register: r_tg_https



- name: Add listeners to the API load balancer
  elb_network_lb:
    name: "{{ api_nlb_name }}"
    scheme: internal
    subnets: "{{ private_subnets }}"
    purge_listeners: no
    listeners:
      - Protocol: TCP
        Port: "{{ item.port | int }}"
        DefaultActions:
          - Type: forward
            TargetGroupName: "{{ item.group }}"
    state: present
  loop:
    - { port: "6443", group: "{{ r_tg_api.target_group_name }}" }
    - { port: "22623", group: "{{ r_tg_macfg.target_group_name }}" }
  register: r_api_nlb

- name: Add listener to the app load balancer
  elb_network_lb:
    name: "{{ app_nlb_name }}"
    scheme: internal
    subnets: "{{ private_subnets }}"
    purge_listeners: no
    listeners:
      - Protocol: TCP
        Port: "{{ item.port | int }}"
        DefaultActions:
          - Type: forward
            TargetGroupName: "{{ item.group }}"
    state: present
  loop:
    - { port: "80", group: "{{ r_tg_http.target_group_name }}" }
    - { port: "443", group: "{{ r_tg_https.target_group_name }}" }
  register: r_app_nlb

# Need these values later to create DNS entries
- name: Save load balancer facts
  set_fact:
    api_nlb_arn: "{{ r_api_nlb.results.0.load_balancer_arn }}"
    app_nlb_arn: "{{ r_app_nlb.results.0.load_balancer_arn }}"
    api_nlb_dns_name: "{{ r_api_nlb.results.0.dns_name }}"
    app_nlb_dns_name: "{{ r_app_nlb.results.0.dns_name }}"
