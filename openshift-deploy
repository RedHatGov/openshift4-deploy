#!/usr/bin/env python3

import argparse
import os
import subprocess


BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SUPPORTED_CONTAINER_RUNTIMES = ['podman', 'docker']


class ContainerRuntimeMissingError(Exception):
    pass


class OpenShiftDeployHelper(object):
    @staticmethod
    def file_exists(value):
        if not os.path.isfile(value):
            raise argparse.ArgumentTypeError('The path {} does not exist'.format(value))
        return value


class OpenShiftDeploy(object):
    def __init__(self, skip_update=False):
        self.skip_update = skip_update

        self.user_home_dir = self._user_home_dir()
        self.ssh_keys_dir = self._ssh_keys_dir()
        self.aws_credentials_dir = self._aws_credentials_dir()

        self.container_runtime = self._container_runtime()
        self.container_image = 'quay.io/jaredhocutt/openshift4-deploy:latest'
        self.container_run_command = self._container_run_command()

    def _user_home_dir(self):
        """
        The home directory to the actual user, even when run using sudo.
        """
        user = os.environ.get('SUDO_USER', os.environ['USER'])

        return os.path.expanduser('~{}'.format(user))

    def _ssh_keys_dir(self):
        """
        The SSH keys directory for the user.
        """
        return '{}/.ssh'.format(self.user_home_dir)

    def _aws_credentials_dir(self):
        """
        The AWS credentials directory for the user.
        """
        return '{}/.aws'.format(self.user_home_dir)

    def _vars_file_realpath(self, vars_file):
        """
        The real path to the variables file inside of the container.
        """
        return os.path.realpath(vars_file).replace(BASE_DIR, '/app')

    def _container_runtime(self):
        """
        The container runtime to use.
        """
        for runtime in SUPPORTED_CONTAINER_RUNTIMES:
            try:
                subprocess.call([runtime, '--version'],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE)
                return runtime
            except OSError:
                pass

        raise ContainerRuntimeMissingError()

    def _container_run_command(self):
        """
        The container run command with the common options already specified.
        """
        cmd = [
            self.container_runtime,
            'run',
            '--interactive',
            '--tty',
            '--rm',
            '--pull', 'always' if not self.skip_update else 'missing',
            '--hostname', 'openshift4-deploy',
            '--volume', '{}:/root/.ssh:z'.format(self.ssh_keys_dir),
            '--volume', '{}:/root/.aws:z'.format(self.aws_credentials_dir),
            '--volume', '{}:/app:z'.format(BASE_DIR),
        ]

        # Inject environment variables from host that are used for running the
        # automation
        for key, value in os.environ.items():
            if key.startswith('AWS_'):
                cmd.extend(['--env', '{}={}'.format(key, value)])

        cmd.append(self.container_image)
        return cmd

    def _playbook_run_command(self, playbook, vars_file, playbook_args=[]):
        cmd = self.container_run_command + [
            'ansible-playbook', playbook,
            '-e', '@{}'.format(self._vars_file_realpath(vars_file)),
        ] + playbook_args

        return cmd

    def shell(self):
        """
        Open a shell inside the environment.
        """
        subprocess.call(self.container_run_command)

    def create(self, vars_file, playbook_args=[]):
        """
        Create the cluster.
        """
        subprocess.call(
            self._playbook_run_command(
                'playbooks/create_cluster.yml',
                vars_file,
                playbook_args,
            )
        )

    def destroy(self, vars_file, playbook_args=[]):
        """
        Destroy the cluster.
        """
        subprocess.call(
            self._playbook_run_command(
                'playbooks/destroy_cluster.yml',
                vars_file,
                playbook_args,
            )
        )

    def start(self, vars_file, playbook_args=[]):
        """
        Start the machines in the cluster.
        """
        subprocess.call(
            self._playbook_run_command(
                'playbooks/start_cluster.yml',
                vars_file,
                playbook_args,
            )
        )

    def stop(self, vars_file, playbook_args=[]):
        """
        Stop the machines in the cluster.
        """
        subprocess.call(
            self._playbook_run_command(
                'playbooks/stop_cluster.yml',
                vars_file,
                playbook_args,
            )
        )


if __name__ == '__main__':
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument(
        '--skip-update',
        action='store_true',
        help='skip automatic update of the conatiner image')

    parent_parser_playbooks = argparse.ArgumentParser(add_help=False)
    parent_parser_playbooks.add_argument(
        '--vars-file',
        required=True,
        type=OpenShiftDeployHelper.file_exists,
        help='path to your variables file')

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    parser_shell = subparsers.add_parser(
        'shell',
        parents=[parent_parser],
        help='open a shell inside of the environment')
    parser_shell.set_defaults(action='shell')

    parser_shell = subparsers.add_parser(
        'create',
        parents=[parent_parser, parent_parser_playbooks,],
        help='create the cluster')
    parser_shell.set_defaults(action='create')

    parser_shell = subparsers.add_parser(
        'destroy',
        parents=[parent_parser, parent_parser_playbooks,],
        help='destroy the cluster')
    parser_shell.set_defaults(action='destroy')

    parser_shell = subparsers.add_parser(
        'start',
        parents=[parent_parser, parent_parser_playbooks,],
        help='start the machines in your cluster')
    parser_shell.set_defaults(action='start')

    parser_shell = subparsers.add_parser(
        'stop',
        parents=[parent_parser, parent_parser_playbooks,],
        help='stop the machines in your cluster')
    parser_shell.set_defaults(action='stop')

    known_args, extra_args = parser.parse_known_args()

    try:
        od = OpenShiftDeploy(
            skip_update=known_args.skip_update,
        )
    except ContainerRuntimeMissingError:
        print('\n'.join([
            'You do not have a supported container runtime installed.',
            '',
            'This script supports the following container runtimes:',
            '\n'.join('  - {}'.format(i) for i in SUPPORTED_CONTAINER_RUNTIMES),
            '',
            'Please install one of those options and try again.'
        ]))

    if not hasattr(known_args, 'action'):
        parser.print_help()
        exit(0)

    if known_args.action == 'shell':
        od.shell()
    elif known_args.action == 'create':
        od.create(known_args.vars_file, extra_args)
    elif known_args.action == 'destroy':
        od.destroy(known_args.vars_file, extra_args)
    elif known_args.action == 'start':
        od.start(known_args.vars_file, extra_args)
    elif known_args.action == 'stop':
        od.stop(known_args.vars_file, extra_args)
